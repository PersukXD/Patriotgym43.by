from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.core.files import File
import os
from urllib.parse import urlparse

import requests
from io import BytesIO


class PatriotNews(models.Model):
    title = models.CharField(max_length=255, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    date = models.DateField(verbose_name="–î–∞—Ç–∞")
    main_image = models.URLField(max_length=500, blank=True, null=True, verbose_name="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç")
    additional_images = models.JSONField(default=list, blank=True, verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        verbose_name = "–ù–æ–≤–æ—Å—Ç—å –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è"
        verbose_name_plural = "–ù–æ–≤–æ—Å—Ç–∏ –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è"
        ordering = ['-date']

    def __str__(self):
        return self.title

    def get_detail_url(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"""
        return self.main_image if self.main_image else "#"

    def has_additional_images(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return len(self.additional_images) > 0


def user_avatar_path(instance, filename):
    return f'avatars/user_{instance.user.id}/{filename}'


class ShopItem(models.Model):
    CATEGORY_CHOICES = [
        ('avatar_frame', '–†–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏'),
        ('profile_background', '–§–æ–Ω –ø—Ä–æ—Ñ–∏–ª—è'),
        ('badge', '–ó–Ω–∞—á–æ–∫'),
        ('title', '–û—Å–æ–±—ã–π —Ç–∏—Ç—É–ª'),
        ('animation', '–ê–Ω–∏–º–∞—Ü–∏—è'),
    ]

    RARITY_CHOICES = [
        ('common', '–û–±—ã—á–Ω—ã–π'),
        ('rare', '–†–µ–¥–∫–∏–π'),
        ('epic', '–≠–ø–∏—á–µ—Å–∫–∏–π'),
        ('legendary', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'),
    ]

    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    category = models.CharField(max_length=50, choices=CATEGORY_CHOICES, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    rarity = models.CharField(max_length=20, choices=RARITY_CHOICES, verbose_name="–†–µ–¥–∫–æ—Å—Ç—å")
    price = models.IntegerField(verbose_name="–¶–µ–Ω–∞ –≤ –∞–ª–º–∞–∑–∞—Ö")
    image = models.ImageField(upload_to='shop/items/', verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", blank=True, null=True)
    image_url = models.URLField(max_length=500, blank=True, null=True, verbose_name="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    preview_image = models.ImageField(upload_to='shop/previews/', blank=True, null=True, verbose_name="–ü—Ä–µ–≤—å—é")
    css_class = models.CharField(max_length=100, blank=True, verbose_name="CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –º–∞–≥–∞–∑–∏–Ω–∞"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞"
        ordering = ['category', 'price']

    def __str__(self):
        return f"{self.name} ({self.get_category_display()}) - {self.price} –∞–ª–º–∞–∑–æ–≤"

    def get_rarity_color(self):
        colors = {
            'common': '#6B7280',  # —Å–µ—Ä—ã–π
            'rare': '#3B82F6',  # —Å–∏–Ω–∏–π
            'epic': '#8B5CF6',  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'legendary': '#F59E0B',  # –∑–æ–ª–æ—Ç–æ–π
        }
        return colors.get(self.rarity, '#6B7280')

    def get_image_url(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É URL, –ø–æ—Ç–æ–º —É —Ñ–∞–π–ª–∞"""
        if self.image_url:
            return self.image_url
        elif self.image and hasattr(self.image, 'url'):
            return self.image.url
        return '/static/images/default-shop-item.png'

    def get_preview_url(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–µ–≤—å—é"""
        if self.preview_image and hasattr(self.preview_image, 'url'):
            return self.preview_image.url
        return self.get_image_url()

    def get_rarity_display_with_emoji(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ —Å —ç–º–æ–¥–∑–∏ (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)"""
        rarity_emojis = {
            'common': '‚ö™',
            'rare': 'üîµ',
            'epic': 'üü£',
            'legendary': 'üü°'
        }
        emoji = rarity_emojis.get(self.rarity, '‚ö™')

        # –ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ RARITY_CHOICES
        rarity_dict = dict(self.RARITY_CHOICES)
        rarity_name = rarity_dict.get(self.rarity, self.rarity)

        return f"{emoji} {rarity_name}"


class UserInventory(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='inventory')
    item = models.ForeignKey(ShopItem, on_delete=models.CASCADE)
    purchased_at = models.DateTimeField(auto_now_add=True)
    is_equipped = models.BooleanField(default=False, verbose_name="–ù–∞–¥–µ—Ç–æ")

    class Meta:
        verbose_name = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        unique_together = ['user', 'item']

    def __str__(self):
        return f"{self.user.username} - {self.item.name}"


class AvatarFrame(models.Model):
    name = models.CharField(max_length=100)
    image = models.ImageField(upload_to='avatar_frames/')
    price = models.IntegerField(default=0)
    rarity = models.CharField(max_length=20, choices=[
        ('common', '–û–±—ã—á–Ω–∞—è'),
        ('rare', '–†–µ–¥–∫–∞—è'),
        ('epic', '–≠–ø–∏—á–µ—Å–∫–∞—è'),
        ('legendary', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'),
    ], default='common')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class Badge(models.Model):
    name = models.CharField(max_length=100)
    image = models.ImageField(upload_to='badges/')
    description = models.TextField()
    display_on_avatar = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    status = models.CharField(max_length=255, blank=True)
    bio = models.TextField(blank=True)
    diamonds = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # –£–±—Ä–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ShopItem
    active_avatar_frame = models.ForeignKey(ShopItem, on_delete=models.SET_NULL,
                                            null=True, blank=True,
                                            related_name='active_avatar_frames',
                                            verbose_name="–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏",
                                            limit_choices_to={'category': 'avatar_frame'})
    active_profile_background = models.ForeignKey(ShopItem, on_delete=models.SET_NULL,
                                                  null=True, blank=True,
                                                  related_name='active_backgrounds',
                                                  verbose_name="–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω –ø—Ä–æ—Ñ–∏–ª—è",
                                                  limit_choices_to={'category': 'profile_background'})
    active_badge = models.ForeignKey(ShopItem, on_delete=models.SET_NULL,
                                     null=True, blank=True,
                                     related_name='active_badges',
                                     verbose_name="–ê–∫—Ç–∏–≤–Ω—ã–π –∑–Ω–∞—á–æ–∫",
                                     limit_choices_to={'category': 'badge'})

    def __str__(self):
        return f"–ü—Ä–æ—Ñ–∏–ª—å {self.user.username}"

    def get_friends_count(self):
        return self.friends.count()

    def get_posts_count(self):
        return self.user.post_set.count()

    def add_diamonds(self, amount):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–ª–º–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        self.diamonds += amount
        self.save()
        return self.diamonds

    def spend_diamonds(self, amount):
        """–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∞–ª–º–∞–∑—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"""
        if self.diamonds >= amount:
            self.diamonds -= amount
            self.save()
            return True
        return False

    def get_equipped_items(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–¥–µ—Ç—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        equipped_items = UserInventory.objects.filter(
            user=self.user,
            is_equipped=True
        ).select_related('item')

        return equipped_items

    def get_equipped_avatar_frame(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–¥–µ—Ç—É—é —Ä–∞–º–∫—É –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            return UserInventory.objects.get(
                user=self.user,
                item__category='avatar_frame',
                is_equipped=True
            )
        except UserInventory.DoesNotExist:
            return None


class Friendship(models.Model):
    from_user = models.ForeignKey(UserProfile, related_name='friendship_requests_sent', on_delete=models.CASCADE)
    to_user = models.ForeignKey(UserProfile, related_name='friendship_requests_received', on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    accepted = models.BooleanField(default=False)

    class Meta:
        unique_together = ('from_user', 'to_user')

    def __str__(self):
        return f"{self.from_user.user.username} -> {self.to_user.user.username}"


class Post(models.Model):
    POST_TYPES = [
        ('text', '–¢–µ–∫—Å—Ç'),
        ('image', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
        ('video', '–í–∏–¥–µ–æ'),
        ('audio', '–ê—É–¥–∏–æ'),
    ]

    author = models.ForeignKey(User, related_name='post_set', on_delete=models.CASCADE)
    content = models.TextField(verbose_name="–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    post_type = models.CharField(max_length=10, choices=POST_TYPES, default='text')
    media_file = models.FileField(upload_to='posts/media/', blank=True, null=True)
    audio_cover = models.ImageField(upload_to='posts/audio_covers/', blank=True, null=True,
                                    verbose_name="–û–±–ª–æ–∂–∫–∞ –∞—É–¥–∏–æ")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"–ü–æ—Å—Ç –æ—Ç {self.author.username}"

    def user_can_delete(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"""
        return user.is_authenticated and (user == self.author or user.is_staff)


class UserQuest(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='quests')
    quest_type = models.CharField(max_length=100, verbose_name="–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è")
    difficulty = models.CharField(max_length=20, verbose_name="–°–ª–æ–∂–Ω–æ—Å—Ç—å")
    completed = models.BooleanField(default=False, verbose_name="–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
    diamonds_earned = models.IntegerField(default=0, verbose_name="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–ª–º–∞–∑–æ–≤")
    completed_at = models.DateTimeField(null=True, blank=True, verbose_name="–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.quest_type} ({self.difficulty})"


class Like(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='likes')
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'post')


class Comment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')
    content = models.TextField(max_length=1000)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['created_at']

    def user_can_delete(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        return user.is_authenticated and (user == self.user or user == self.post.author or user.is_staff)


class WikiwayImage(models.Model):
    title = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    alt_text = models.TextField(blank=True, verbose_name="Alt —Ç–µ–∫—Å—Ç")
    original_src = models.URLField(max_length=1000, verbose_name="Original SRC")
    data_src = models.URLField(max_length=1000, blank=True, verbose_name="Data SRC")
    image_url = models.URLField(max_length=1000, verbose_name="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    width = models.IntegerField(blank=True, null=True, verbose_name="–®–∏—Ä–∏–Ω–∞")
    height = models.IntegerField(blank=True, null=True, verbose_name="–í—ã—Å–æ—Ç–∞")
    style_width = models.CharField(max_length=50, blank=True, verbose_name="–®–∏—Ä–∏–Ω–∞ –≤ —Å—Ç–∏–ª–µ")
    style_height = models.CharField(max_length=50, blank=True, verbose_name="–í—ã—Å–æ—Ç–∞ –≤ —Å—Ç–∏–ª–µ")
    is_parsed = models.BooleanField(default=False, verbose_name="–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        verbose_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Wikiway"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Wikiway"
        ordering = ['-created_at']

    def __str__(self):
        return self.title

    def get_final_image_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ data-src)"""
        return self.data_src if self.data_src else self.original_src

    def get_display_url(self):
        """URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ–µ"""
        image_url = self.get_final_image_url()
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ URL –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
        if image_url.startswith('//'):
            image_url = 'https:' + image_url
        elif image_url.startswith('/'):
            image_url = 'https://wikiway.com' + image_url
        return image_url

    def get_filename(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL"""
        url = self.get_display_url()
        parsed_url = urlparse(url)
        return parsed_url.path.split('/')[-1] if '/' in parsed_url.path else 'image'


class HistoricalRegion(models.Model):
    PERIOD_CHOICES = [
        ('ancient', '–î—Ä–µ–≤–Ω–æ—Å—Ç—å (–¥–æ X –≤–µ–∫–∞)'),
        ('middle_ages', '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ (X-XV –≤–µ–∫–∞)'),
        ('grand_duchy', '–í–µ–ª–∏–∫–æ–µ –ö–Ω—è–∂–µ—Å—Ç–≤–æ –õ–∏—Ç–æ–≤—Å–∫–æ–µ (XIII-XVI –≤–µ–∫–∞)'),
        ('polish_lithuanian', '–†–µ—á—å –ü–æ—Å–ø–æ–ª–∏—Ç–∞—è (XVI-XVIII –≤–µ–∫–∞)'),
        ('russian_empire', '–í —Å–æ—Å—Ç–∞–≤–µ –†–æ—Å—Å–∏–π—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏ (XVIII-XX –≤–µ–∫–∞)'),
        ('soviet', '–°–æ–≤–µ—Ç—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ (1917-1991)'),
        ('modern', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ë–µ–ª–∞—Ä—É—Å—å (—Å 1991)'),
    ]

    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞/–≥–æ—Ä–æ–¥–∞")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    stories = models.TextField(verbose_name="–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏", help_text="–†–∞–∑–¥–µ–ª—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π")
    coordinates = models.JSONField(verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞",
                                   help_text="JSON —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ")
    center_lat = models.FloatField(verbose_name="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —à–∏—Ä–æ—Ç–∞")
    center_lng = models.FloatField(verbose_name="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞")
    period = models.CharField(max_length=20, choices=PERIOD_CHOICES, verbose_name="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥")
    year = models.IntegerField(verbose_name="–ì–æ–¥ —Å–æ–±—ã—Ç–∏—è", blank=True, null=True)
    category = models.CharField(max_length=100, choices=[
        ('war', '–í–æ–µ–Ω–Ω—ã–µ –ø–æ–¥–≤–∏–≥–∏'),
        ('science', '–ù–∞—É–∫–∞ –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è'),
        ('culture', '–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ'),
        ('people', '–í—ã–¥–∞—é—â–∏–µ—Å—è –ª–∏—á–Ω–æ—Å—Ç–∏'),
        ('mystery', '–ó–∞–≥–∞–¥–∫–∏ –∏ —Ç–∞–π–Ω—ã'),
    ], verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    image = models.ImageField(upload_to='historical_regions/', blank=True, null=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–æ")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = 'app_historical_regions'
        verbose_name = "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω"
        verbose_name_plural = "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã"
        ordering = ['period', 'year']

    def __str__(self):
        return f"{self.name} ({self.get_period_display()})"

    def get_stories_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–π"""
        return [story.strip() for story in self.stories.split(';') if story.strip()]

    def get_category_icon(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        icons = {
            'war': '‚öîÔ∏è',
            'science': 'üî¨',
            'culture': 'üé≠',
            'people': 'üë§',
            'mystery': 'üîç',
        }
        return icons.get(self.category, 'üìç')



class Course(models.Model):
    title = models.CharField(max_length=500, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞")
    date_range = models.CharField(max_length=100, verbose_name="–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è")
    image_url = models.URLField(max_length=1000, blank=True, null=True, verbose_name="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    is_completed = models.BooleanField(default=False, verbose_name="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    additional_info = models.TextField(blank=True, verbose_name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    organizers = models.TextField(blank=True, verbose_name="–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã")
    url = models.URLField(max_length=1000, verbose_name="URL –∫—É—Ä—Å–∞")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        db_table = 'app_patriot_courses'
        verbose_name = "–ö—É—Ä—Å"
        verbose_name_plural = "–ö—É—Ä—Å—ã"
        ordering = ['-created_at']

    def __str__(self):
        return self.title


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.get_or_create(user=instance)


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.userprofile.save()




# –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ –≤ UserProfile –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –∫–ª–∞—Å—Å UserProfile (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç):
