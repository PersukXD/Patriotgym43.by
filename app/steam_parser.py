# app/steam_parser.py
import os
import sys
import django
from django.core.files import File
from io import BytesIO
import requests
from urllib.parse import urlparse
import time
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Patriot.settings')
django.setup()

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup

from app.models import ShopItem


class SteamPointsShopParser:
    def __init__(self, headless=False):
        self.headless = headless
        self.driver = None
        self.base_url = "https://store.steampowered.com/points/shop/c/home/cluster/10"

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞...")

        try:
            chrome_options = Options()

            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)

            user_agents = [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            ]
            chrome_options.add_argument(f"--user-agent={random.choice(user_agents)}")

            if self.headless:
                chrome_options.add_argument("--headless")

            print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver...")
            service = Service(ChromeDriverManager().install())

            print("üöÄ –ó–∞–ø—É—Å–∫ Chrome...")
            self.driver = webdriver.Chrome(service=service, options=chrome_options)

            self.driver.set_page_load_timeout(60)
            self.driver.implicitly_wait(10)

            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            print("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False

    def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            try:
                self.driver.quit()
                print("üî¥ Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass

    def safe_get_page(self, url):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")

            self.driver.get(url)
            time.sleep(8)

            if "Steam" in self.driver.title or "points" in self.driver.current_url:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
            else:
                print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –Ω–æ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ Steam")
                return True

        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False

    def scroll_page(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

        try:
            scroll_pause_time = 2
            max_scrolls = 10
            last_height = self.driver.execute_script("return document.body.scrollHeight")
            scroll_count = 0

            while scroll_count < max_scrolls:
                print(f"üîÑ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {scroll_count + 1}/{max_scrolls}...")

                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(scroll_pause_time)

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                time.sleep(1)

                new_height = self.driver.execute_script("return document.body.scrollHeight")
                if new_height == last_height:
                    print("üìè –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    break

                last_height = new_height
                scroll_count += 1

            print("‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ: {e}")

    def parse_steam_items(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Steam Points Shop...")

        if not self.setup_driver():
            return []

        try:
            if not self.safe_get_page(self.base_url):
                return []

            self.scroll_page()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            page_html = self.driver.page_source
            with open("steam_page_debug.html", "w", encoding="utf-8") as f:
                f.write(page_html)
            print("üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: steam_page_debug.html")

            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            frames_data = self.find_avatar_frames_stable()

            if not frames_data:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–∞–º–∫–∞–º–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤")
                return []

            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–∞–º–∫–∞–º–∏: {len(frames_data)}")

            parsed_items = []

            for i, frame_data in enumerate(frames_data):
                try:
                    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i + 1}/{len(frames_data)}")
                    print(f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {frame_data['name']}")
                    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {frame_data['image_url'][:80]}...")

                    item_data = {
                        'name': frame_data['name'],
                        'description': f"–†–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ Steam Points Shop. {frame_data['name']}",
                        'category': 'avatar_frame',
                        'rarity': 'common',
                        'price': 300,
                        'image_url': frame_data['image_url'],
                    }

                    parsed_items.append(item_data)
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {frame_data['name']}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i + 1}: {e}")
                    continue

            return parsed_items

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback
            traceback.print_exc()
            return []
        finally:
            self.close_driver()

    def find_avatar_frames_stable(self):
        """–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–º–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π stale elements"""
        frames_data = []

        print("üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–∞—Ä—Å–∏–º —Å BeautifulSoup
            page_html = self.driver.page_source
            soup = BeautifulSoup(page_html, 'html.parser')

            # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ BeautifulSoup (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ)
            frames_data = self.parse_cards_with_bs4(soup)

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ BS4, –ø—Ä–æ–±—É–µ–º Selenium —Å –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if not frames_data:
                print("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Selenium —Å –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–æ–º...")
                frames_data = self.parse_cards_with_selenium_retry()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")

        return frames_data

    def parse_cards_with_bs4(self, soup):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ BeautifulSoup (–±–µ–∑ stale elements)"""
        frames_data = []

        # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∫–ª–∞—Å—Å—É
        cards = soup.find_all('div', class_='padding-top-large')
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ BS4: {len(cards)}")

        for card in cards:
            try:
                # –ò—â–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
                type_element = card.find(class_='_2FQCUXF5fJTFVBLk8XgRUd')
                if not type_element:
                    continue

                item_type = type_element.get_text(strip=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
                if "–†–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞" not in item_type:
                    continue

                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                name_element = card.find(class_='EccZY8FXMaK1CgBOE2ztA')
                if not name_element:
                    continue

                item_name = name_element.get_text(strip=True)
                if not item_name:
                    continue

                # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_element = card.find('img', class_='_2MPpwm3uMppV0DPtkN4Pp_')
                if not img_element:
                    continue

                image_url = (img_element.get('src') or
                             img_element.get('data-src') or
                             img_element.get('data-lazy-src') or "")

                if not image_url:
                    continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                image_url = self.normalize_image_url(image_url)

                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                item_name = " ".join(item_name.split())

                frames_data.append({
                    'name': item_name,
                    'image_url': image_url,
                    'type': item_type
                })

                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–º–∫–∞ —á–µ—Ä–µ–∑ BS4: {item_name}")

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ BS4: {e}")
                continue

        return frames_data

    def parse_cards_with_selenium_retry(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ Selenium —Å –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        frames_data = []

        try:
            # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å stale reference
            cards = self.driver.find_elements(By.CSS_SELECTOR, "div.padding-top-large")
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ Selenium: {len(cards)}")

            for i in range(len(cards)):
                try:
                    # –ö–∞–∂–¥—ã–π —Ä–∞–∑ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                    current_cards = self.driver.find_elements(By.CSS_SELECTOR, "div.padding-top-large")
                    if i >= len(current_cards):
                        break

                    card = current_cards[i]

                    # –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                    card_data = self.get_card_data_quick(card, i)
                    if card_data:
                        frames_data.append(card_data)

                except StaleElementReferenceException:
                    print(f"üîÑ Stale element –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i + 1}: {e}")
                    continue

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ Selenium –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

        return frames_data

    def get_card_data_quick(self, card, index):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–∏–Ω–∏–º—É–º–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ BS4
            card_html = card.get_attribute('outerHTML')
            card_soup = BeautifulSoup(card_html, 'html.parser')

            # –ò—â–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
            type_element = card_soup.find(class_='_2FQCUXF5fJTFVBLk8XgRUd')
            if not type_element:
                return None

            item_type = type_element.get_text(strip=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
            if "–†–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞" not in item_type:
                return None

            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            name_element = card_soup.find(class_='EccZY8FXMaK1CgBOE2ztA')
            if not name_element:
                return None

            item_name = name_element.get_text(strip=True)
            if not item_name:
                return None

            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_element = card_soup.find('img', class_='_2MPpwm3uMppV0DPtkN4Pp_')
            if not img_element:
                return None

            image_url = (img_element.get('src') or
                         img_element.get('data-src') or
                         img_element.get('data-lazy-src') or "")

            if not image_url:
                return None

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL
            image_url = self.normalize_image_url(image_url)

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            item_name = " ".join(item_name.split())

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–º–∫–∞ —á–µ—Ä–µ–∑ Selenium: {item_name}")

            return {
                'name': item_name,
                'image_url': image_url,
                'type': item_type
            }

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {index + 1}: {e}")
            return None

    def normalize_image_url(self, image_url):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
        if not image_url:
            return image_url

        # –ï—Å–ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
        if image_url.startswith('//'):
            image_url = 'https:' + image_url
        elif image_url.startswith('/'):
            image_url = 'https://shared.fastly.steamstatic.com' + image_url

        return image_url

    def save_to_database(self, item_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
            existing_item = ShopItem.objects.filter(
                name=item_data['name'],
                category='avatar_frame'
            ).first()

            if existing_item:
                print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {item_data['name']}")
                return False

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞
            shop_item = ShopItem(
                name=item_data['name'],
                description=item_data['description'],
                category=item_data['category'],
                rarity=item_data['rarity'],
                price=item_data['price'],
                image_url=item_data['image_url'],
                is_active=True
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            shop_item.save()

            print(f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É: {item_data['name']}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")
            return False


def run_steam_parsing():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    print("=" * 60)
    print("üéÆ –ü–ê–†–°–ï–† STEAM POINTS SHOP")
    print("=" * 60)

    parser = SteamPointsShopParser(headless=False)

    try:
        items_data = parser.parse_steam_items()

        if not items_data:
            print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return 0, 0

        saved_count = 0
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(items_data)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É...")

        for i, item_data in enumerate(items_data, 1):
            print(f"\nüì• [{i}/{len(items_data)}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {item_data['name']}")
            if parser.save_to_database(item_data):
                saved_count += 1

        print("\n" + "=" * 60)
        print(f"üéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(items_data)}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {saved_count}")
        print("=" * 60)

        return len(items_data), saved_count

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 0, 0


if __name__ == "__main__":
    run_steam_parsing()